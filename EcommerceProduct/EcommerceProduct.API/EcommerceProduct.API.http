@EcommerceProduct.API_HostAddress = https://localhost:7032
# Create a JWT token using the .NET CLI command below and replace YOUR_JWT_TOKEN with the generated token.
# dotnet user-jwts create --issuer https://localhost:7032 --audience ecommerceproductapi
@jwtToken = YOUR_JWT_TOKEN

### ========================
### USER AUTHENTICATION
### ========================

### 1. Register a new user
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/register
Content-Type: application/json

{
  "username": "testuser",
  "email": "testuser@example.com",
  "password": "SecurePassword123!",
  "firstName": "Test",
  "lastName": "User"
  }

### 2. Login with user credentials
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "SecurePassword123!"
}

### 3. User Authentication (POST request to obtain JWT token)
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/authenticate
Content-Type: application/json

{
  "username": "testuser",
  "password": "SecurePassword123!"
}

### 4. Delete user by ID
DELETE {{EcommerceProduct.API_HostAddress}}/api/authentication/2
Accept: application/json
Authorization: Bearer {{jwtToken}}

### 4. Get user by ID
GET {{EcommerceProduct.API_HostAddress}}/api/authentication/1
Accept: application/json

### ========================
### PROTECTED ENDPOINTS
### ========================

### 5. Test Weather Forecast (no auth required)
GET {{EcommerceProduct.API_HostAddress}}/weatherforecast/
Accept: application/json
Authorization: Bearer {{jwtToken}}

### 6. Get all customers (requires authentication)
GET {{EcommerceProduct.API_HostAddress}}/api/customers
Accept: application/json
Authorization: Bearer {{jwtToken}}
