@EcommerceProduct.API_HostAddress = https://localhost:7032
# Create a JWT token using the .NET CLI command below and replace YOUR_JWT_TOKEN with the generated token.
# dotnet user-jwts create --issuer https://localhost:7032 --audience ecommerceproductapi

# testuser
@jwtToken = YOUR_JWT_TOKEN

# admin
@jwtTokenAdmin = YOUR_JWT_TOKEN_ADMIN

### ========================
### USER AUTHENTICATION
### ========================

### Register admin
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/register
Content-Type: application/json

{
  "username": "admin",
  "email": "admin@example.com",
  "password": "admin123!",
  "firstName": "admin",
  "lastName": "admin"
  }

### 1. Register a new user
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/register
Content-Type: application/json

{
  "username": "testuser",
  "email": "testuser@example.com",
  "password": "SecurePassword123!",
  "firstName": "Test",
  "lastName": "User"
  }

### 2. Login with user credentials
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "SecurePassword123!"
}

### 2. Login with user credentials
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin123!"
}

### 3. User Authentication (POST request to obtain JWT token)
POST {{EcommerceProduct.API_HostAddress}}/api/authentication/authenticate
Content-Type: application/json

{
  "username": "testuser",
  "password": "SecurePassword123!"
}

### 4. Delete user by ID
DELETE {{EcommerceProduct.API_HostAddress}}/api/authentication/2
Accept: application/json
Authorization: Bearer {{jwtTokenAdmin}}

### 4. Get user by ID
GET {{EcommerceProduct.API_HostAddress}}/api/authentication/1
Accept: application/json
Authorization: Bearer {{jwtTokenAdmin}}

### 4. Get all users

GET {{EcommerceProduct.API_HostAddress}}/api/authentication
Accept: application/json
Authorization: Bearer {{jwtTokenAdmin}}